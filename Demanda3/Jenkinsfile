pipeline {
   agent any
   environment {
       DOCKERHUB_CREDENTIALS = credentials('jk-dh-tk')
   }

   stages {
       stage('SCM Checkout') {
           steps {
               git branch: 'main', url: 'https://github.com/Franck-Patrick/Desafio_DellTech.git'
           }
       }

       stage('Build Docker Image') {
           steps {
               sh 'docker build -t pkdu14/webapp:${BUILD_NUMBER} -f Demanda3/Dockerfile Demanda3/'
           }
       }

       stage('Login to Docker Hub') {
           steps {
               sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
           }
       }

       stage('Push Image') {
           steps {
               sh 'docker push pkdu14/webapp:${BUILD_NUMBER}'
           }
       }

      stage('Deploy Application') {
   steps {
       script {
           sh '''
           # Verifica se existe um contêiner rodando com o nome "webapp_ctr" e o para
           if [ "$(docker ps -q -f name=webapp_ctr)" ]; then
               echo "Parando e removendo o contêiner existente..."
               docker stop webapp_ctr || true
               docker rm webapp_ctr || true
           fi

           # Executa o novo contêiner na porta 3000
           echo "Iniciando o novo contêiner..."
           docker run --rm -d -p 8084:3000 --name webapp_ctr pkdu14/webapp:${BUILD_NUMBER}
           '''
       }
   }
}

       stage('Execute Commands in Container') {
           steps {
               script {
                   sh '''
                   # Executa um comando genérico dentro do container
                   docker exec webapp_ctr echo "Executing commands inside the container"
                   docker exec webapp_ctr python -m SimpleHTTPServer 3000
                   '''
               }
           }
       }
   }

   post {
       always {
           sh 'docker logout'
       }
   }
}
