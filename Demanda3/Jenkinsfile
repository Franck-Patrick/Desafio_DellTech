pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'alpine:latest'
        DEPLOY_IMAGE = 'httpd:alpine'
        GIT_REPO = 'https://github.com/Franck-Patrick/Desafio_DellTech.git'
        CONTAINER_NAME = 'app-container'
        DEPLOY_CONTAINER = 'deploy-container'
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
    }

    stages {
        stage('Clone Repository') {
            steps {
                cleanWs()
                echo "Clonando repositório: ${GIT_REPO}"
                git branch: 'main', url: "${GIT_REPO}"
            }
        }

        stage('Docker Login') {
            steps {
                script {
                    if (env.DOCKER_HUB_CREDENTIALS) {
                        sh '''
                            echo $DOCKER_HUB_CREDENTIALS_PSW | docker login -u $DOCKER_HUB_CREDENTIALS_USR --password-stdin
                        '''
                    }
                }
            }
        }

        stage('Build & Test') {
            steps {
                script {
                    // Garantir que os comandos sejam executados dentro de um nó
                    node {
                        sh '''
                            # Remove container se já existir
                            docker rm -f ${CONTAINER_NAME} || true
                            
                            # Pull da imagem explicitamente
                            docker pull ${DOCKER_IMAGE}
                            
                            # Executa o container
                            docker run -d --name ${CONTAINER_NAME} ${DOCKER_IMAGE} sleep 300
                            
                            # Executa comandos no container
                            docker exec ${CONTAINER_NAME} /bin/sh -c "
                                echo 'Alpine Version:'
                                cat /etc/alpine-release
                                
                                echo 'System Info:'
                                uname -a
                            "
                        '''
                    }
                }
            }
        }

        stage('Custom Script') {
            steps {
                script {
                    node {
                        sh '''
                            docker exec ${CONTAINER_NAME} /bin/sh -c "
                                echo 'Executando script personalizado...'
                                
                                # Criar arquivo de log
                                echo 'Pipeline executada em $(date)' > /tmp/execution_log.txt
                                echo 'Repositório: Desafio_DellTech' >> /tmp/execution_log.txt
                                
                                # Informações do sistema
                                echo 'Informações do sistema:' >> /tmp/execution_log.txt
                                uname -a >> /tmp/execution_log.txt
                            "
                            
                            # Copia o arquivo de log do container
                            docker cp ${CONTAINER_NAME}:/tmp/execution_log.txt .
                        '''
                    }
                    
                    archiveArtifacts artifacts: 'execution_log.txt', allowEmptyArchive: true
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    node {
                        sh '''
                            # Remove container de deploy anterior se existir
                            docker rm -f ${DEPLOY_CONTAINER} || true
                            
                            # Pull da imagem explicitamente
                            docker pull ${DEPLOY_IMAGE}
                            
                            # Executa container de deploy
                            docker run -d --name ${DEPLOY_CONTAINER} -p 8080:80 ${DEPLOY_IMAGE}
                            
                            # Verifica se o container está rodando
                            docker ps | grep ${DEPLOY_CONTAINER}
                            
                            echo "Container de deploy iniciado com sucesso!"
                            
                            # Aguarda 10 segundos para garantir que o container iniciou
                            sleep 10
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                node {
                    sh '''
                        docker rm -f ${CONTAINER_NAME} || true
                        docker rm -f ${DEPLOY_CONTAINER} || true
                    '''
                    cleanWs()
                    sh 'docker logout || true'
                }
            }
        }
        success {
            echo 'Pipeline executada com sucesso!'
        }
        failure {
            echo 'Pipeline falhou!'
        }
    }
}
